const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const fileUpload = require('express-fileupload');
const fs =require('fs')
const MongoClient = require('mongodb').MongoClient;
require('dotenv').config()

const app = express()

const uri = `mongodb+srv://${process.env.DB_USER}:${process.env.DB_PASS}@cluster0.vxjbg.mongodb.net/${process.env.DB_NAME}?retryWrites=true&w=majority`;



app.use(bodyParser.json());
app.use(cors());
app.use(express.static('doctors'));
app.use(fileUpload());

const port = 5200;

app.get('/', (req, res) => {
    res.send("hello from db it's working for doctor portal ")
})
const client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true });
client.connect(err => {
    const appointmentCollection = client.db("doctor-portal").collection("appointments");
    const doctorCollection = client.db("doctor-portal").collection("doctors");
   
    app.post('/addAppointment',(req,res)=>{
        const appointment =req.body
        //console.log(appointment)
        appointmentCollection.insertOne(appointment)
        .then(result =>{
            res.send(result.insertedCount >0)
        })
    });

    app.get('/appointments', (req, res) => {
        appointmentCollection.find({})
            .toArray((err, documents) => {
                res.send(documents);
            })
    })

    app.post('/appointmentsByDate', (req, res) => {
        const date = req.body;
        const email = req.body.email;
        doctorCollection.find({ email: email })
            .toArray((err, doctors) => {
                const filter = { date: date.date }
                if (doctors.length === 0) {
                    filter.email = email;
                }
                appointmentCollection.find(filter)
                    .toArray((err, documents) => {
                        console.log(email, date.date, doctors, documents)
                        res.send(documents);
                    })
            })
    }) 
      
     

    app.post('/addADoctor',(req,res)=>{
  
        const file = req.files.file;
        const name = req.body.name;
        const email = req.body.email;
        const newImg = file.data;
       // const encImg = newImg.toString('base64');
       const filePath =`${__dirname}/doctors/${file.name}`

      /*   const image = {
            contentType: file.mimetype,
            size: file.size,
            img: Buffer.from(encImg, 'base64')
        };
 */
      
          file.mv(filePath,err =>{
           
            if(err){
                console.log(err) 
                return res.status(500).send('image upload fail')
            }
            //return res.send({name:file.name,path:`/${file.name}`})
            const newImg=fs.readFileSync(filePath)
            const encImg = newImg.toString('base64');
            const image = {
                contentType: file.mimetype,
                size: file.size,
                img: Buffer.from(encImg, 'base64')
            }
              doctorCollection.insertOne({ name, email,image })
              .then(result => {
                  fs.remove(filePath,error=>{
                      if(error){
                          console.log(error)
                          return res.status(500).send('image upload fail')
                      }
                      res.send(result.insertedCount > 0);  
                  })
            
             })
       
        }) 
 
      
    })
// getting doctor
    app.get('/doctors', (req, res) => {
        doctorCollection.find({})
            .toArray((err, documents) => {
                res.send(documents);
            })
    });
  app.post('/isDoctor', (req, res) => {
        const email = req.body.email;
        doctorCollection.find({ email: email })
            .toArray((err, doctors) => {
                res.send(doctors.length > 0);
            })
    })



    }) 
 

app.listen(process.env.PORT || port)


